#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import sys, os
import matplotlib as mpl
from matplotlib import animation
import argparse
import yaml
import time

'''
A module to visualize YAML data files

author : Olivier Kermorgant
'''

try:
    sys.argv.remove('--pylab')
except:
    pass

# in-script tuning
videoFreeze = 10
# LateX
mpl.rc('font', family='sans-serif')
mpl.rc('text', usetex = True)
#rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
mpl.rcParams['text.latex.preamble']=[
    r"\usepackage{amsmath}",
    r'\usepackage{helvet}',    # set the normal font here
    r'\usepackage{sansmath}',  # load up the sansmath so that math -> helvet
    r'\sansmath']


def toTex(s, math = True):
    if '<' not in s and not math:
        return s
    while '<' in s:
        front_tilde = (s[0] != '<' and '~' or '')
        back_tilde  = (s[-1] != '>' and '~' or '')       
        
        s = s.replace('<', front_tilde + '\\text{', 1)
        s = s.replace('>', back_tilde + '}', 1)        
    return '$' + s + '$'

#rcParams['font.family'] = 'sans-serif'
#rcParams['font.sans-serif'] = ['Tahoma']
# plot colors
plot_colors = ['C' + str(i) for i in range(10)]
plot_markers = ['', 'o', 's', 'x', 'D', 'p', '+']

nbmark = 10.
# margin around actual values
plotMargin = 0.05

# build parser
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.description = 'A module to draw plots from YAML-formatted data'

# files
argFiles = parser.add_argument_group('Files')
argFiles.add_argument('files', metavar='file', type=str, nargs='+', help='Files to be plotted')

# general args
argGal = parser.add_argument_group('General options')
argGal.add_argument('-g', '--group', action='store_true', help='Draws the files in the same plot',default=False)
argGal.add_argument('-L', '--Lines', metavar='lines', type=int, help='Number of subplot lines',default=1)
argGal.add_argument('--delete', action='store_true', help='Erase the datafile and does not save the figure (ie just displays)', default=False)
argGal.add_argument('--nodisplay', action='store_true', help='Does not display',default=False)
argGal.add_argument('--white', action='store_true', help='White border around figure',default=False)
argGal.add_argument('--xy', type=int, nargs=2, help='Plot x vs y according to given indices.',default=())
argGal.add_argument('--index', type=int, help='Only plots from 0 to given x-index', default=0)
argGal.add_argument('--only', type=int, nargs='+', help='Only plots given curve indices', default=())
argGal.add_argument('--fig', type=float, help='Figure dimensions', nargs=2, default=(5,7.5))
argGal.add_argument('--steps', type=float, nargs='+', help='Will plot vertical lines at given steps', default=())
argGal.add_argument('--inset', type=float, nargs=8, help='Add inset in 2D plot', default=(0,0,0,0,0,0,0,0))


# Value-related
argValues = parser.add_argument_group('Value-related options')
argValues.add_argument('--norm', type=str, help='Plots the norm of the value with the given legend',default='')
argValues.add_argument('-d', '--diff', action='store_true', help='Plots the difference between the two files',default=False)
argValues.add_argument('--diffpc', action='store_true', help='Plots the difference in percent between the two files',default=False)
argValues.add_argument('--scale', metavar='x', type=float, help='Rescale all the values',default=1.)
argValues.add_argument('--rescale', metavar=['label', 'min', 'max'], nargs=3, help='Rescale given label between min and max',default=[])
argValues.add_argument('--xLim', metavar='min, max', nargs=2, type=float, help='Impose lower and upper bounds for X axis',default=[])
argValues.add_argument('--yLim', metavar='min, max', nargs=2, type=float, help='Impose lower and upper bounds for Y axis',default=[])
argValues.add_argument('--logY', action='store_true', help='Use log scale for Y-axis',default=False)
argValues.add_argument('--logY2', action='store_true', help='Use log scale for secondary Y-axis',default=False)
argValues.add_argument('--logX', action='store_true', help='Use log scale for X-axis',default=False)

# font and line args
argFontLine = parser.add_argument_group('Font and line options')
argFontLine.add_argument('-s', '--fontSize', metavar='size', type=int, help='Global font size',default=20)
argFontLine.add_argument('--fontAxes', metavar='size', type=int, help='Size adjustment for axes fonts', default=0)
argFontLine.add_argument('--fontLabel', metavar='size', type=int, help='Size adjustment for label fonts',default=2)
argFontLine.add_argument('--fontLegend', metavar='size', type=int, help='Size adjustment for legend fonts',default=1)
argFontLine.add_argument('-l', '--lineWidth', metavar='width', type=int, help='Line width',default=2)

# legend and label args
argLegendLabel = parser.add_argument_group('Legend and label options')
argLegendLabel.add_argument('--legendLoc', metavar='location', type=str, help='Legend position (-1 for no legend)',default='best')
argLegendLabel.add_argument('--legendCol', metavar='columns', type=int, help='Legend columns',default=1)
argLegendLabel.add_argument('--legendMax', metavar='max legends', type=int, help='Max number of lines to display legend',default=6)
argLegendLabel.add_argument('--legend', metavar='legend', nargs='+', type=str, help='Rename the plots when drawing several curves, works for XY and 3D plots',default=())
argLegendLabel.add_argument('--noY', action='store_true', help='Does not display Y label',default=False)
argLegendLabel.add_argument('--noYa', action='store_true', help='Does not display Y values',default=False)
argLegendLabel.add_argument('--noX', action='store_true', help='Does not display X label',default=False)
argLegendLabel.add_argument('--no0', action='store_true', help='Does not display 0-x axis',default=False)
argLegendLabel.add_argument('--twin', metavar='index',  type=int, help='Separate y-axis after index', default=-1)
argLegendLabel.add_argument('--twinLabel', metavar='index',  type=str, help='y-label of new axis', default='')

# 3D plot args
arg3Dplot = parser.add_argument_group('3D plot options')
arg3Dplot.add_argument('--afmacMf', action='store_true', help='Pose comes from Afma6 cMf()',default=False)
arg3Dplot.add_argument('-i', '--invertPose', action='store_false', help='Invert the pose for 3D plot)',default=False)
arg3Dplot.add_argument('--gMo', metavar='x', type=float, nargs=6, help='Changes frame transformation matrix for 3D plot (t, thetaU)',default=(0,0,0,0,0,0))
arg3Dplot.add_argument('--ae', metavar='angle', type=float, nargs=2, help='Azimuth and elevation in 3D plots',default=(-125.,15.))
arg3Dplot.add_argument('--nbcam', type=int, help='Number of moving objects to be plotted',default=10)
arg3Dplot.add_argument('--equal', action='store_true', help='Scales 3D axis to equal values',default=False)

# video args
argVid = parser.add_argument_group('Video options')
argVid.add_argument('-v', dest='video', type=int, help='Creates a video with given subsampling',default=0)
argVid.add_argument('--dt', dest='dt', type=float, help='Time step, used to create videos',default=0.04)
argVid.add_argument('--v3d', dest='v3d', type=int, help='Creates a video by having 3D plot rotate',default=0)


global args
args = parser.parse_args()

if args.nodisplay:
    # tell matplotlib that no X-server is needed
    mpl.use('Agg')
from pylab import *
import mpl_toolkits.mplot3d 
from matplotlib.font_manager import FontProperties
from mpl_toolkits.axes_grid1.inset_locator import (inset_axes, InsetPosition, mark_inset)

# function to and check consistency and links between arguments 
def checkArgs(parsed):
    global plot2D
    global plotMargin
    
    plot2D = plot
    
    if parsed.noYa:
        parsed.noY = True;
    if parsed.twin != -1:
        parsed.group = True
    if  parsed.white:
        mpl.rc('axes', edgecolor='white')
    else:
        mpl.rc('axes', edgecolor='black')
    if parsed.video > 0:
        #parsed.legendLoc = -1
        parsed.lineWidth = 4
    if parsed.afmacMf:
        parsed.invertPose = True
        parsed.gMo = (0,0,0,0,pi,0)
    if parsed.group:
        parsed.Lines = 1
    if parsed.logX:
        plot2D = semilogx
    elif parsed.logY:
        plot2D = semilogy
        plotMargin = 0
    
        
    avail_legends = ('best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center' 'center', 'out', 'none')
    
    if parsed.legendLoc == -1:
        parsed.legendLoc = 'none'
    elif parsed.legendLoc.isdigit():
        parsed.legendLoc = int(parsed.legendLoc)
        if parsed.legendLoc > len(avail_legends):
            parsed.legendLoc = 'best'
        else:
            parsed.legendLoc = avail_legends[parsed.legendLoc]  
    parsed.legendLoc = parsed.legendLoc.replace('_', ' ')
    #if parsed.legendLoc not in avail_legends:
    #    print('not in list')
    #    parsed.legendLoc = 'best'
    
    return parsed

args = checkArgs(parser.parse_args())

# rotation from theta-u
def Rot(tU):
    th = norm(tU)
    u = array([1,0,0])
    if(th != 0):
        u = tU.copy()/th
    u.shape = (3,1)
    R = cos(th)*identity(3) + sin(th)*array([[0,-u[2],u[1]],[u[2],0,-u[0]],[-u[1],u[0],0]]) + (1-cos(th))*dot(u,u.transpose())
    return matrix(R)

# homogeneous transform matrix
m01 = matrix([[0.,0.,0.,1.]])
def Homogeneous(t, R):
    return matrix(concatenate((concatenate((R,t),1),m01),0))

# compute gMo and gRo
gRo = Rot(args.gMo[3:])
gMo = Homogeneous(matrix(args.gMo[:3]).reshape(3,1), gRo)

# change pose (t,theta u) to Fg (3d plot frame)
def poseToPlotFrame(p, invertPose):
    if args.invertPose or invertPose:
        oRc = Rot(p[3:]).transpose()
        oTc = -oRc*matrix(p[:3].reshape(3,1))
    else:
        oRc = Rot(p[3:])
        oTc = matrix(p[:3].reshape(3,1))
    return gMo * matrix(concatenate((concatenate((oRc,oTc),1),m01),0))

legendSize = FontProperties(size=args.fontSize+args.fontLegend)

# function to change dictionary to namespace
class dictToNamespace(object):
  def __init__(self, adict):
    self.__dict__.update(adict)
    
def xval(dataSt, idx, max_ind = -1):
    if dataSt.dataType == 'XY':
        val = dataSt.x[:,idx]
    else:
        val = dataSt.x[:,0]
    if max_ind == -1:
        return val
    return val[:max_ind]

def full_line(dataSt, idx):
    return 'k-' in dataSt.lineType[idx] and dataSt.legend[idx] == ''


# -- 2D plots ------------------------

def init2D():
    global F, lines, all_ax, plot2D
    L = args.Lines
    if len(dataList) < L:
        L = len(dataList) 
    C = int(float(len(dataList))/L)
    F = figure(figsize=(args.fig[1]*C,args.fig[0]*L))
    
    # get axes number and limits
    lines = []
    all_ax = []
    for i,dataSt in enumerate(dataList):
        # get bounds
        if len(args.xLim) == 2:
            (xMin,xMax) = args.xLim
        else:
            xMin = nanmin(dataSt.x)
            xMax = nanmax(dataSt.x)
            if dataSt.dataType == 'XY':
                xMin,xMax = xMin-plotMargin*(xMax-xMin), xMax+plotMargin*(xMax-xMin)
                    
        if args.twin != -1:
            # only one plot, store limits for both axes
            yMin = nanmin(dataSt.data[:,:args.twin+1])
            yMax = nanmax(dataSt.data[:,:args.twin+1])
            yMin2 = nanmin(dataSt.data[:,args.twin+1:])
            yMax2 = nanmax(dataSt.data[:,args.twin+1:])
        else:
            # several plots, use all data with the same ylabel for y limits (valid if ylabel != '')
            yMin = nanmin(dataSt.data)
            yMax = nanmax(dataSt.data)
            if dataSt.ylabel != '':
                yMin = min([nanmin(otherSt.data) for otherSt in dataList if otherSt.ylabel == dataSt.ylabel])
                yMax = max([nanmax(otherSt.data) for otherSt in dataList if otherSt.ylabel == dataSt.ylabel])
        if len(args.yLim) == 2:
            (yMin,yMax) = args.yLim

        # add first axis
        ax = F.add_subplot(L, C, i+1, autoscale_on=False, xlim=(xMin, xMax), ylim=(yMin-plotMargin*(yMax-yMin), yMax + plotMargin*(yMax-yMin)))
        all_ax.append(ax)
        
        # add vertical lines
        for step in list(args.steps) + ('steps' in dataSt.keys and dataSt.steps or []):
            plot2D([step,step], ylim(), 'k--', linewidth=args.lineWidth-1)
        
        if 'fixedObjects' in dataSt.keys:
            for obj in dataSt.fixedObjects:
                for k in obj.graph:
                    plot2D(obj.nodes[0,k], obj.nodes[1,k], obj.color, linewidth=max(2,args.lineWidth-1))
        
        # set x label
        if i//C == L-1 and args.noX == False:
            xlabel(dataSt.xlabel, size = args.fontSize+args.fontLabel)
            
        # set y label
        if args.noY == False:
            ylabel(dataSt.ylabel, size = args.fontSize+args.fontLabel)
        
        # add lines
        sublines = []
        for j in range(dataSt.data.shape[1]):
            if full_line(dataSt, j): # black lines without legend are always plotted entirely (usually axes or bounds)
                plot2D(xval(dataSt,j), dataSt.data[:,j], dataSt.lineType[j], linewidth=('k--' in dataSt.lineType[j] and args.lineWidth-1 or args.lineWidth))
            else:
                sublines += plot2D([], [], dataSt.lineType[j], label = dataSt.legend[j], linewidth=('k--' in dataSt.lineType[j] and args.lineWidth-1 or args.lineWidth), markevery=(j, dataSt.rows//10))
            if j == args.twin:
                # change axe
                ax = ax.twinx()
                all_ax.append(ax)
                ax.set_xlim(xMin,xMax)
                if args.logY2:
                    plot2D = semilogy
                    ax.set_ylim(yMin2, yMax2)
                else:
                    ax.set_ylim(yMin2-plotMargin*(yMax2-yMin2), yMax2 + plotMargin*(yMax2-yMin2))
                ax.set_ylabel(args.twinLabel, size = args.fontSize+args.fontLabel)
        # add 0-axis if needed
        if args.no0 == False and dataSt.dataType != 'XY':
            if dataSt.dataType == 'XY':
                plot2D([xMin,xMax],[0,0], 'k-',linewidth=args.lineWidth-1)
                plot2D([0,0],[yMin, yMax], 'k-',linewidth=args.lineWidth-1)
            else:
                plot2D(dataSt.x[[0,-1]], [0,0], 'k-', linewidth=args.lineWidth-1)
                
        # store lines
        lines += sublines
        
    # correct font / display legend on all found axes
    for ax in all_ax:
        for ti in ax.get_xticklabels():
            ti.set_fontsize(args.fontSize-1+args.fontAxes)
        if args.noYa:
            ax.set_yticks([])
        else:
            for ti in ax.get_yticklabels():
                ti.set_fontsize(args.fontSize+args.fontAxes)
                
    # add inset if needed - only for a single dataStruct
    if len(all_ax) == 1 and args.inset.count(0) != 8:
        
        xm, xM, ym, yM = ax.axis()
        # inset position to normalized coordinates
        xs1, ys1, xs2, ys2 = args.inset[:4]
        x1, y1, x2, y2 = args.inset[4:]
        y2 = y1 + (x2-x1)*(ys2-ys1)/(xs2-xs1)
        
        xn1 = (x1-xm)/(xM-xm)
        yn1 = (y1-ym)/(yM-ym)
        xn2 = (x2-xm)/(xM-xm) - xn1
        yn2 = (y2-ym)/(yM-ym) - yn1
    
        ax_in = axes([0,0,.1,.1])
        ip = InsetPosition(ax, [xn1, yn1, xn2, yn2])
        ax_in.set_axes_locator(ip)
        
        # find best corners to link
        pos = ''
        if ys1 > y2:
            pos = 'top'
        elif ys2 < y1:
            pos = 'bottom'
        if xs1 > x2:
            pos += 'right'
        elif xs2 < x1:
            pos += 'left'
            
        locs = [1,2]
        if pos == 'bottom':
            locs = [1,2]
        elif pos == 'bottomleft':
            locs = [2,4]
        elif pos == 'bottomright':
            locs = [1,3]
        elif pos == 'top':
            locs = [3,4]
        elif pos == 'topleft':
            locs = [1,3]
        elif pos == 'topright':
            locs = [2,4]
        
        mark_inset(ax, ax_in, loc1=locs[0], loc2=locs[1], fc="none", ec='0.5')
        ax_in.axis([xs1,xs2,ys1,ys2])
        
        ax_in.set_xticks([])
        ax_in.set_yticks([])
        
        dataSt = dataList[0]        
        if 'fixedObjects' in dataSt.keys:
            for obj in dataSt.fixedObjects:
                for k in obj.graph:
                    plot2D(obj.nodes[0,k], obj.nodes[1,k], obj.color, linewidth=max(2,args.lineWidth-1))
        for j in range(dataSt.data.shape[1]):
            if dataSt.dataType == 'XY':
                plot2D(dataSt.x[:,j], dataSt.data[:,j], dataSt.lineType[j], linewidth=('k--' in dataSt.lineType[j] and args.lineWidth-1 or args.lineWidth), markevery=(j, dataSt.rows//10))
            else:
                plot2D(dataSt.x, dataSt.data[:,j], dataSt.lineType[j], linewidth=('k--' in dataSt.lineType[j] and args.lineWidth-1 or args.lineWidth), markevery=(j, dataSt.rows//10))
        
    # resize fig
    #F.tight_layout(pad=.2,h_pad=.8,w_pad=.8)
    F.tight_layout()
    return F


# refresh 2D figure
def refresh2D(ind = -1):
    global F, lines, all_ax, lgd
    if ind == -1:
        ind = dataList[0].rows
    iline = 0    
    for i,dataSt in enumerate(dataList):
        for j in range(dataSt.data.shape[1]):
            if not full_line(dataSt, j): # is a line to be refreshed
                if dataSt.dataType == 'XY':
                    lines[iline].set_data(dataSt.x[:ind,j], dataSt.data[:ind,j])
                else:
                    lines[iline].set_data(dataSt.x[:ind], dataSt.data[:ind,j])
                iline += 1
    # display legends if needed
    #draw()
    ax_legend = range(len(all_ax))
    if args.twin != -1:
        ax_legend = [args.twin+1]
    for idx in ax_legend:
        ax = all_ax[idx]
        disp = [line for line in lines]
        if len(args.files) > 1:
            disp = [line for line in ax.lines]
        if(args.legendLoc != 'none'):
            if args.legendLoc != 'out':
                lgd = ax.legend(disp, [l.get_label() for l in disp], loc=args.legendLoc, ncol = args.legendCol, prop=legendSize, numpoints=1, fancybox=True, framealpha=0.9)
            else:
            # out of box
                lgd = legend(disp, [l.get_label() for l in disp], loc="upper left", bbox_to_anchor=(1,1), ncol = args.legendCol, prop=legendSize, numpoints=1,framealpha=0.5 )


    return lines

# -- end 2D plots ------------------------------


# -- Begin 3D plot -----------------------------

# 3D axes limits and object scaling (I)
lim3D = zeros(6)
I = matrix(identity(3))

def line3Dobject(ax, objectGraph, objectNodes, objectPose, lineType):
    '''
    Draws new lines for a 3D object (wireframe) at a given pose. Returns the lines for the case of videos 
    '''
    gP = array(Homogeneous(objectPose[:3,3], I*objectPose[:3,:3]) * objectNodes)
    objLines = []
    for i in objectGraph:
        objLines += ax.plot(gP[0,i], gP[1,i], gP[2,i], lineType, linewidth=max(2,args.lineWidth-1))
    return objLines

def init3D():
    global F, lines, ax, indMoving

    F = figure(figsize=(1.5*args.fig[0],1.5*args.fig[0]))
    ax = F.gca(projection='3d')
    #sp = subplot(1,1,1)
    #sp.set_xticks(array([]))
    #sp.set_yticks(array([]))
    F.tight_layout(pad=.2,h_pad=.8,w_pad=.8)
    #ax = Axes3D(F, rect=sp.get_position())
    ax.view_init(args.ae[1],args.ae[0])
    objectPoses = []
    
    #F.patch.set_visible(False)
    #ax.patch.set_visible(False)

    # indices where to show the moving object, higher p value displays more objects at the beginning (usually faster  motions)
    p = 2
    indMoving = [[int(round((len(dataSt.data)-1)*v**p)) for v in linspace(0,1,args.nbcam)][1:] for dataSt in dataList]

    # first run to get the figure dimensions
    lines = []
    desPoses = []

    for dataSt in dataList:
        # 3D trajectory
        xyz = array(dataSt.data)[:,:,3]
        lines += ax.plot(xyz[:,0], xyz[:,1], xyz[:,2], dataSt.lineType[0], label=dataSt.legend[0],linewidth=args.lineWidth)

        # plot fixed observed object if any - won't move
        if 'fixedObjects' in dataSt.keys:
            for obj in dataSt.fixedObjects:
                for i in obj.graph:
                    ax.plot(obj.nodes[0,i], obj.nodes[1,i], obj.nodes[2,i], obj.color, linewidth=max(2,args.lineWidth-1))
        if 'movingObject' in dataSt.keys:
            if 'desiredPose' in dataSt.movingObject.keys:
                desPoses.append(array(dataSt.movingObject.desiredPose[:3,3]).flatten())
                
    # get axes limits
    lim3D = array([ax.get_xlim3d(), ax.get_ylim3d(), ax.get_zlim3d()]).reshape(6)
    # update according to desired pose if any
    for desPose in desPoses:
        x,y,z = desPose
        for idx in range(3):
            lim3D[2*idx] = min(lim3D[2*idx], desPose[idx])
            lim3D[2*idx+1] = max(lim3D[2*idx+1], desPose[idx])               
    
    dX = .5*max([lim3D[2*i+1]-lim3D[2*i] for i in range(3)]) # max range
    
    # build limits and scaling matrix I    
    for i in range(3):
        x0 = .5*(lim3D[2*i+1] + lim3D[2*i])
        for j in range(2):
            lim3D[2*i+j] = x0 - (-1)**j * dX
        I[i,i] = 0.02*(lim3D[2*i+1] - lim3D[2*i])
    
    # set limits and ratio            
    ax.set_xlim3d([lim3D[0],lim3D[1]])
    ax.set_ylim3d([lim3D[2],lim3D[3]])
    ax.set_zlim3d([lim3D[4],lim3D[5]])
    
    ax.xaxis.labelpad=ax.yaxis.labelpad=15

    ax.set_xlabel('X', size = args.fontSize+args.fontLabel)
    ax.set_ylabel('Y', size = args.fontSize+args.fontLabel)
    ax.set_zlabel('Z', size = args.fontSize+args.fontLabel)
    
    if len(ax.get_xticks()) > 7:
        for d in 'xyz':
            ax.locator_params(axis=d,nbins=5)
    
    #    ax.set_aspect('equal')
    # another run to plot first / desired positions of objects
    for dataSt in dataList:
        if 'movingObject' in dataSt.keys:
            # initial
            line3Dobject(ax, dataSt.movingObject.graph, dataSt.movingObject.nodes, dataSt.data[0], dataSt.lineType[2])
            # desired
            if 'desiredPose' in dataSt.movingObject.keys:
                desiredDisplay = dataSt.lineType[3]
                if not desiredDisplay.endswith('-'):
                    desiredDisplay += '--'
                line3Dobject(ax, dataSt.movingObject.graph, dataSt.movingObject.nodes, dataSt.movingObject.desiredPose, desiredDisplay)
            # if video, prepare lines for moving
            if args.video:
                lines += line3Dobject(ax, dataSt.movingObject.graph, dataSt.movingObject.nodes, dataSt.data[1], dataSt.lineType[2])
                
    for ti in ax.get_xticklabels() + ax.get_yticklabels() + ax.get_zticklabels():
        ti.set_fontsize(args.fontSize-2+args.fontAxes)

    return F


def refresh3D(ind = -1):
    global lines, ax, indMoving

    if ind == -1:
        ind = dataList[0].rows

    iline = 0
    for dataSt in dataList:
        # 3D trajectory
        if ind > 0:
            xyz = array(dataSt.data[:ind])[:,:,3]
            lines[iline].set_data(xyz[:,0], xyz[:,1])
            lines[iline].set_3d_properties(xyz[:,2])
        else:
            lines[iline].set_data([],[])
            lines[iline].set_3d_properties([])
        iline += 1

    # deal with moving object
    if ind == dataList[0].rows:
        # fixed picture: plot all
        for k,dataSt in enumerate(dataList):
            if 'movingObject' in dataSt.keys:
                for i in indMoving[k]:
                    line3Dobject(ax, dataSt.movingObject.graph, dataSt.movingObject.nodes, dataSt.data[i], dataSt.lineType[(i==indMoving[k][-1]) and 3 or 1])
    else:
        # moving: plot (refresh) only current
        for dataSt in dataList:
            if 'movingObject' in dataSt.keys:
                gP = array(Homogeneous(dataSt.data[ind][:3,3], I*dataSt.data[ind][:3,:3])* dataSt.movingObject.nodes)

                for i in dataSt.movingObject.graph:
                    lines[iline].set_data(gP[0,i], gP[1,i])
                    lines[iline].set_3d_properties(gP[2,i])
                    iline += 1
    
    if args.legendLoc != 'none':
        lgd = ax.legend(loc=args.legendLoc, ncol = args.legendCol, prop=legendSize, numpoints=1)
    return lines


def readFileList(filenames, n=0):
    '''
    Returns list of data contained in filenames
    Recursive for metafiles
    '''
    global args
    if n > 5:
        print('readFileList too recursive, check files')
        sys.exit(1)
    dataList = []
    k = 0
    for file_idx,filename in enumerate(filenames):
        with open(filename) as f:
            try:
                d = yaml.safe_load(f)
            except:
                print('Could not read ' + filename)
                sys.exit(0)
           
        if 'args' in d:    # get args used when creating file
            if type(d['args']) == list:
                d['args'] = ' '.join(d['args'])
            args = checkArgs(parser.parse_args(sys.argv[1:] + d['args'].split()))            
        if d['dataType'] == 'metafile':
            dataList += readFileList(d['files'],n+1)
        else:
            # read data partially or totally
            if args.index == 0:
                args.index = len(d['data'])
            d['data'] = array([[float(v) for v in line] for line in d['data'][:args.index]])
            if args.only != ():
                d['data'] = d['data'][:,args.only]                
            # rescale particular variable
            if len(args.rescale) != 0 and args.rescale[0] in d['legend']:
                args.rescale[1] = float(args.rescale[1])
                args.rescale[2] = float(args.rescale[2])
                i = d['legend'].index(args.rescale[0])
                dMin = nanmin(d['data'][:,i])
                dMax = nanmax(d['data'][:,i])
                d['data'][:,i] = args.rescale[1] + (d['data'][:,i] - dMin)/(dMax - dMin) * (args.rescale[2] - args.rescale[1]) 

            # create custom /y axis if xy plot
            if len(args.xy) == 2:
                idx,idy = args.xy
                if idx < d['data'].shape[1] and idy < d['data'].shape[1]:
                    d['x'] = d['data'][:,[idx]]
                    d['data'] = d['data'][:,[idy]]
                    # also copy legends to x/y labels
                    if 'legend' in d:
                        if idx < len(d['legend']):
                            d['xlabel'] = d['legend'][idx]
                        if idy < len(d['legend']):
                            d['ylabel'] = d['legend'][idy]
                        # rename or remove legend
                        if len(args.legend):
                            d['legend'] = [args.legend[file_idx]]
                        else:
                            d.pop('legend')
            elif d['dataType'] == 'XY':
                d['x'] = d['data'][:,::2]
                d['data'] = d['data'][:,1::2]*args.scale
            # otherwise create x-axis depending on iteration or time-based                    
            elif d['dataType'] == 'time-based':
                d['x'] = d['data'][:,0]
                d['data'] = d['data'][:,1:]*args.scale
            elif d['dataType'] == 'iteration-based':
                d['x'] = arange(d['data'].shape[0])
                d['data'] *= args.scale
            # create legend and lineType keys if not present and fill up to data dimension 
            for key in ('units', 'legend', 'lineType'):
                # create key
                if key not in d:
                    d[key] = []    
                if len(d[key]) > d['data'].shape[1]:
                    # field too large
                    d[key] = [d[key][ind] for ind in args.only]
                else:
                    # field too small
                    d[key] += [''] * (d['data'].shape[1] - len(d[key]))
            # set default values for 3D plot lineType
            if d['dataType'] == '3D pose':
                defLine = [plot_colors[k%len(plot_colors)], plot_colors[k%len(plot_colors)], 'r', 'r']
                k+=1
                for i in range(4):
                    if d['lineType'][i] == '':
                        d['lineType'][i] = defLine[i]
            else:
                # set default values for 2D plot lineType
                for i in range(d['data'].shape[1]):
                    if d['lineType'][i] == '':
                        d['lineType'][i] = plot_colors[k%len(plot_colors)] + '-'+ plot_markers[k%len(plot_markers)]
                        k+=1
            if 'legend' in d:
                # empty legends if legend is not displayed
                if args.legendLoc == 'none':
                    d['legend'] = [''] * d['data'].shape[1]
                # set non-empty legends to Latex-style (2D only)
                if d['dataType'] != '3D pose':
                    for i in range(len(d['legend'])):
                        if d['legend'][i] != '':
                            d['legend'][i] = toTex(d['legend'][i])
                            if len(d['units']) > i:
                                if d['units'][i] != '':
                                    d['legend'][i] += ' [%s]' % d['units'][i]
            # create xlabel and ylabel keys
            for label in ('xlabel', 'ylabel'):
                if label not in d:
                    d[label] = ''
            # set ylabel to Latex-style if needed
            d['ylabel'] = toTex(d['ylabel'], False)
                
            # store data dimension
            d['rows'],d['cols'] = d['data'].shape
            
            # 3D plot: check for moving or fixed object, change relative pose to absolute plot frame (do it once when reading the file)
            if d['dataType'] == '3D pose':
                d['data'] = [poseToPlotFrame(p,'invertPose' in d) for p in d['data']]
                if 'movingObject' in d:
                    obj = d['movingObject']
                    obj['nodes'] = concatenate((matrix(obj['nodes']).transpose(),ones((1,len(obj['nodes'])))),0)
                    if 'desiredPose' in obj:
                        obj['desiredPose'] = poseToPlotFrame(array(obj['desiredPose'][0]),'invertPose' in d)
                    obj['keys'] = obj.keys()
                    d['movingObject'] = dictToNamespace(obj)
                obj_keys = [key for key in d if key.startswith('fixedObject')]
                if len(obj_keys):
                    d['fixedObjects'] = []
                    for key in obj_keys:
                        obj = d[key]
                        obj['nodes'] = array(gMo * concatenate((matrix(obj['nodes']).transpose(),ones((1,len(obj['nodes'])))),0))[:3,:]
                        if 'color' not in obj:
                            obj['color'] = 'b'
                        d['fixedObjects'].append(dictToNamespace(obj))
                        d.pop(key)
            else:
                # check for fixed objects in 2D graph
                obj_keys = [key for key in d if key.startswith('fixedObject')]
                d['fixedObjects'] = []
                for key in obj_keys:
                    obj = d[key]
                    obj['nodes'] = array(obj['nodes']).transpose()
                    if 'color' not in obj:
                        obj['color'] = 'b'
                    d['fixedObjects'].append(dictToNamespace(obj))
                    d.pop(key)
                                  
            # store existing keys
            d['keys'] = d.keys()

            # store d as namespace instead of dict
            dataList.append(dictToNamespace(d))

    return dataList
 
# begin of main code, when calling from command line
if __name__ == "__main__":
    close('all')

    # check files
    ext_try = ['yml', 'yaml', 'txt']
    for i,f in enumerate(args.files):
        if os.path.lexists(f) == False:
            found = False
            if f[-1] != '.':
                f += '.'
            for ext in ext_try:
                if os.path.lexists(f + ext):
                    found = True
                    print('Assuming {} is for {}'.format(f, f + ext))
                    args.files[i] = f + ext
                    break
            if not found:
                print(f + ' could not be found')
                sys.exit(0)

    #  if directory was given, then process all inner .txt files with the same arguments (= replot all files)
    if os.path.isdir(args.files[0]):
        for filename in os.listdir(args.files[0]):
            if filename[-4:] == '.txt':
                print('Reading ' + filename)
                os.system('python ' + sys.argv[0] + ' ' + args.files[0] + '/' + filename + ' --nodisplay ' + ' '.join(sys.argv[2:]))
        sys.exit(0)

    basePath = '/'.join(os.path.abspath(args.files[0]).split('/')[:-1])

    # read content of files
    dataList = readFileList(args.files)

    # build baseName
    baseNames = [os.path.splitext(filename.split('/')[-1])[0] for filename in args.files]
    baseName = baseNames[0]
    if len(args.files) > 1:
        #baseNames = baseNames[1:]
        nameLen = min([len(b) for b in baseNames])
        i = 0
        while i < nameLen and [b[i] for b in baseNames] == [baseName[i]]*len(args.files):
            i += 1
        baseName += '_' + '_'.join([b[i:] for b in baseNames[1:]])
    fullName = basePath + '/' + baseName

    # create metafile if several files, same extension as 1st file
    if len(args.files) > 1:
        print('Writing metafile ' + fullName + '.' + args.files[0].split('.')[-1])
        with open(fullName + '.' + args.files[0].split('.')[-1],'w') as f:
            yaml.dump({'dataType': 'metafile', 'files': args.files}, f, default_flow_style=False)
            add_args = ' '.join([arg for arg in sys.argv[len(args.files)+1:] if arg != '--nodisplay'])
            if add_args:
                yaml.dump({'args': add_args}, f, default_flow_style=False)

    # ---- Rearrange data depending on the options -----------------
    # if 3D data, then group but do not concatenate matrices
    if dataList[0].dataType == '3D pose':
        args.group = True
        if len(args.legend) == len(dataList):
            for i in range(len(dataList)):
                dataList[i].legend[0] = args.legend[i]
    elif args.group:
        # if 2D and group, then concatenate 2D data into a single structure
        dataMain = dataList[0]
        for dataSt in dataList[1:]:
            if dataSt.dataType != dataMain.dataType:
                print('Warning, trying to group {} and {}'.format(dataMain.dataType, dataSt.dataType))
            if dataSt.ylabel != dataMain.ylabel:
                print('Warning, trying to group with different ylabels: {} vs {}'.format(dataMain.ylabel, dataSt.ylabel))
                dataMain.ylabel = ''
            if shape(dataSt.data)[0] != shape(dataMain.data)[0]:
                print('Trying to group data with different lengths: {} vs {} - aborting'.format(shape(dataMain.data)[0], shape(dataSt.data)[0]))
                sys.exit(0)
                
            # ok, concatenate data, legends, lineTypes and units
            dataMain.data = concatenate((dataMain.data, dataSt.data),1)
            dataMain.legend += dataSt.legend
            dataMain.lineType += dataSt.lineType
        dataList = [dataMain]
    elif args.diff:
        # compute the difference
        if len(dataList) != 2:
            print('Error, 2 files needed to plot diff')
            sys.exit(0)
        if dataList[0].data.shape == dataList[1].data.shape:
            dataList[0].data -= dataList[1].data
            dataList = [dataList[0]]
    elif args.diffpc:
        # compute the difference in percent
        if len(dataList) != 2:
            print('Error, 2 files needed to plot diffpc')
            sys.exit(0)
        if dataList[0].data.shape == dataList[1].data.shape:
            dataList[1].data = dataList[0].data - dataList[1].data
            for i in range(dataList[0].data.shape[0]):
                for j in range(dataList[0].data.shape[1]):
                    if dataList[0].data[i,j] != 0:
                        dataList[0].data[i,j] = dataList[1].data[i,j]/dataList[0].data[i,j]
            dataList = [dataList[0]]

    # if compute norm, reduce the vector
    if args.norm != '':
        for dataSt in dataList:
            for i in range(dataSt.data.shape[0]):
                dataSt.data[i][0] = norm(dataSt.data[i])
            dataSt.data = dataSt.data[:,[0]]
            dataSt.legend = [args.norm]
    # -- Data ready to be plotted ----------

    # init plot and define refresh function
    if dataList[0].dataType == '3D pose':
        init3D()
        fun_refresh = refresh3D
    else:
        init2D()
        fun_refresh = refresh2D

    # video or not
    if args.video == 0 and args.v3d == 0:
        fun_refresh()
        fullName += '.pdf'
        if args.legendLoc == 'out':
            F.savefig(fullName, bbox_extra_artists=(lgd,), bbox_inches='tight')
        else:
            F.savefig(fullName)
        if not args.nodisplay:
            show()
    else:
        # some kind of video
        t = time.time()
        if args.v3d:
            # plot 3D
            fun_refresh()
            def fun_refresh(azim):
                ax.azim = azim
                ax.legend(loc = 'upper right', ncol = args.legendCol, prop=legendSize, numpoints=1, fancybox=True, framealpha=0.9)
                draw()
                return lines
            frame_idx = range(int(args.ae[0]), int(args.ae[0]) + args.v3d*360, 2)
            args.video = max(args.video, 1)
        else:
            frame_idx = [int(i) for i in linspace(0,dataList[0].rows-1, (dataList[0].rows-1.)/args.video)]
            # add 2 sec on last frame            
            frame_idx += [dataList[0].rows-1 for _ in range(int(2./(args.video*args.dt)))]
            
        ani = animation.FuncAnimation(F, fun_refresh, frames=frame_idx, interval=1, blit=True, repeat=False)
        print('Saving video...')
        for wrt in ('avconv', 'ffmpeg'):
            if wrt in animation.writers.avail:
                Writer = animation.writers[wrt]
        writer = Writer(fps=1./(args.video*args.dt), bitrate=1800)
        ani.save(filename= fullName + '.mp4', writer=writer)                
        print('time taken: %f' % (time.time() - t))
        #ani.close()

